DIGEST 5b54fd2d0a4ef53938596ef514cf3dd8
FVC.Verif_triang
R71:89 VST.floyd.proofauto <> <> lib
R107:123 VST.floyd.library <> <> lib
R141:148 VC.stack <> <> lib
inst 160:168 <> CompSpecs
R172:180 VST.veric.mpred <> compspecs class
R198:201 VC.stack <> prog def
def 224:228 <> Vprog
R232:239 VST.veric.mpred <> varspecs def
R255:258 VC.stack <> prog def
prf 1066:1081 <> nat_sub_add_yuck
R1086:1087 Coq.Init.Logic <> ::type_scope:'~'_x not
R1101:1103 Coq.Init.Datatypes <> nat ind
R1111:1111 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1109:1109 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R1107:1107 Coq.Init.Peano <> ::nat_scope:x_'-'_x not
R1106:1106 VC.Verif_triang <> a var
R1108:1108 VC.Verif_triang <> b var
R1110:1110 VC.Verif_triang <> b var
R1112:1112 VC.Verif_triang <> a var
prf 1458:1469 <> Z_sub_add_ok
R1487:1487 Coq.Numbers.BinNums <> Z ind
R1495:1495 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1493:1493 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R1491:1491 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R1490:1490 VC.Verif_triang <> a var
R1492:1492 VC.Verif_triang <> b var
R1494:1494 VC.Verif_triang <> b var
R1496:1496 VC.Verif_triang <> a var
R1591:1591 Coq.Numbers.BinNums <> Z ind
def 2117:2130 <> decreasing_nat
R2136:2138 Coq.Init.Datatypes <> nat ind
R2143:2146 Coq.Init.Datatypes <> list ind
R2148:2150 Coq.Init.Datatypes <> nat ind
R2163:2163 VC.Verif_triang <> n var
R2170:2170 Coq.Init.Datatypes <> S constr
R2179:2182 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R2178:2178 VC.Verif_triang <> n var
R2183:2196 VC.Verif_triang <> decreasing_nat def
R2203:2203 Coq.Init.Datatypes <> O constr
R2208:2210 Coq.Init.Datatypes <> nil constr
def 2312:2323 <> decreasing_Z
R2329:2329 Coq.Numbers.BinNums <> Z ind
R2334:2337 Coq.Init.Datatypes <> list ind
R2339:2339 Coq.Numbers.BinNums <> Z ind
R2352:2352 VC.Verif_triang <> n var
def 2618:2634 <> decreasing_Z1_aux
R2640:2642 Coq.Init.Datatypes <> nat ind
R2647:2650 Coq.Init.Datatypes <> list ind
R2652:2652 Coq.Numbers.BinNums <> Z ind
R2666:2666 VC.Verif_triang <> n var
R2677:2677 Coq.Init.Datatypes <> S constr
R2695:2698 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R2685:2692 Coq.ZArith.BinInt Z of_nat def
R2694:2694 VC.Verif_triang <> n var
R2699:2715 VC.Verif_triang <> decreasing_Z1_aux def
R2724:2724 Coq.Init.Datatypes <> O constr
R2729:2731 Coq.Init.Datatypes <> nil constr
def 2751:2763 <> decreasing_Z1
R2769:2769 Coq.Numbers.BinNums <> Z ind
R2774:2777 Coq.Init.Datatypes <> list ind
R2779:2779 Coq.Numbers.BinNums <> Z ind
R2789:2805 VC.Verif_triang <> decreasing_Z1_aux def
R2808:2815 Coq.ZArith.BinInt Z to_nat def
R2817:2817 VC.Verif_triang <> n var
R3030:3037 Coq.ZArith.ZArith_dec <> Z_gt_dec def
R3111:3111 Coq.Numbers.BinNums <> Z ind
R3142:3149 Coq.ZArith.ZArith_dec <> Z_gt_dec def
R3151:3151 VC.Verif_triang <> n var
R3187:3189 Coq.Init.Datatypes <> nil constr
R3161:3164 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R3160:3160 VC.Verif_triang <> n var
R3165:3174 VC.Verif_triang <> decreasing def
R3178:3178 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R3177:3177 VC.Verif_triang <> n var
R3142:3149 Coq.ZArith.ZArith_dec <> Z_gt_dec def
R3151:3151 VC.Verif_triang <> n var
R3187:3189 Coq.Init.Datatypes <> nil constr
R3161:3164 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R3160:3160 VC.Verif_triang <> n var
R3165:3174 VC.Verif_triang <> decreasing def
R3178:3178 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R3177:3177 VC.Verif_triang <> n var
R3142:3149 Coq.ZArith.ZArith_dec <> Z_gt_dec def
R3151:3151 VC.Verif_triang <> n var
R3187:3189 Coq.Init.Datatypes <> nil constr
R3161:3164 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R3160:3160 VC.Verif_triang <> n var
R3165:3174 VC.Verif_triang <> decreasing def
R3178:3178 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R3177:3177 VC.Verif_triang <> n var
R3123:3130 Coq.ZArith.BinInt Z to_nat def
R3624:3635 Coq.ZArith.Znat Z2Nat inj_lt thm
R3624:3635 Coq.ZArith.Znat Z2Nat inj_lt thm
prf 3991:4000 <> Zinduction
R4016:4019 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4015:4015 Coq.Numbers.BinNums <> Z ind
R4032:4037 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4038:4038 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4072:4078 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4095:4098 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4099:4099 VC.Verif_triang <> P var
R4101:4101 VC.Verif_triang <> n var
R4090:4093 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R4094:4094 VC.Verif_triang <> n var
R4054:4057 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4065:4068 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4069:4069 VC.Verif_triang <> P var
R4071:4071 VC.Verif_triang <> i var
R4058:4058 VC.Verif_triang <> P var
R4062:4062 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R4061:4061 VC.Verif_triang <> i var
R4050:4052 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R4053:4053 VC.Verif_triang <> i var
R4029:4029 VC.Verif_triang <> P var
R4131:4138 Coq.ZArith.Znat Z2Nat id thm
R4131:4138 Coq.ZArith.Znat Z2Nat id thm
R4131:4138 Coq.ZArith.Znat Z2Nat id thm
R4168:4175 Coq.ZArith.BinInt Z to_nat def
R4168:4175 Coq.ZArith.BinInt Z to_nat def
R4204:4208 Coq.ZArith.Znat <> inj_S syndef
R4250:4255 Coq.ZArith.BinInt Z succ def
def 4478:4485 <> add_list
R4494:4497 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4498:4498 Coq.Numbers.BinNums <> Z ind
R4488:4491 Coq.Init.Datatypes <> list ind
R4493:4493 Coq.Numbers.BinNums <> Z ind
R4503:4512 Coq.Lists.List <> fold_right def
R4514:4518 Coq.ZArith.BinInt Z add def
prf 4676:4701 <> add_list_decreasing_eq_alt
R4722:4727 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4761:4763 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4730:4733 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R4757:4757 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R4734:4741 VC.Verif_triang <> add_list def
R4744:4753 VC.Verif_triang <> decreasing thm
R4755:4755 VC.Verif_triang <> n var
R4766:4769 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R4773:4773 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R4765:4765 VC.Verif_triang <> n var
R4771:4771 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R4770:4770 VC.Verif_triang <> n var
R4717:4720 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R4721:4721 VC.Verif_triang <> n var
R4815:4824 VC.Verif_triang <> Zinduction prfax
R4815:4824 VC.Verif_triang <> Zinduction prfax
R5531:5549 VC.Verif_triang <> decreasing_equation thm
R5565:5583 VC.Verif_triang <> decreasing_equation thm
R5565:5583 VC.Verif_triang <> decreasing_equation thm
R5565:5583 VC.Verif_triang <> decreasing_equation thm
prf 5951:5972 <> add_list_decreasing_eq
R5993:5998 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6022:6024 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5999:6006 VC.Verif_triang <> add_list def
R6009:6018 VC.Verif_triang <> decreasing thm
R6020:6020 VC.Verif_triang <> n var
R6034:6036 Coq.ZArith.BinInt <> ::Z_scope:x_'/'_x not
R6026:6029 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R6033:6033 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R6025:6025 VC.Verif_triang <> n var
R6031:6031 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R6030:6030 VC.Verif_triang <> n var
R5988:5991 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R5992:5992 VC.Verif_triang <> n var
R6065:6082 Coq.ZArith.BinInt Z div_unique_exact thm
R6065:6082 Coq.ZArith.BinInt Z div_unique_exact thm
def 6610:6616 <> listrep
R6623:6626 Coq.Init.Datatypes <> list ind
R6628:6628 Coq.Numbers.BinNums <> Z ind
R6635:6637 compcert.common.Values <> val ind
R6642:6646 VST.veric.mpred <> mpred def
R6658:6659 VC.Verif_triang <> il var
R6670:6671 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R6679:6681 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R6683:6684 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R6688:6698 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R6809:6811 VST.msl.seplog <> ::logic:x_'*'_x not
R6740:6750 VST.msl.seplog <> ::logic:x_'*'_x not
R6699:6710 VST.floyd.library <> malloc_token defax
R6739:6739 VC.Verif_triang <> p var
R6717:6723 compcert.cfrontend.Ctypes <> Tstruct constr
R6731:6736 compcert.cfrontend.Ctypes <> noattr def
R6725:6729 VC.stack <> _cons def
R6712:6714 VST.veric.shares <> Ews def
R6751:6757 VST.floyd.field_at <> data_at def
R6808:6808 VC.Verif_triang <> p var
R6786:6786 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R6804:6804 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R6806:6806 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R6787:6790 compcert.common.Values <> Vint constr
R6793:6800 compcert.lib.Integers Int repr def
R6805:6805 VC.Verif_triang <> y var
R6764:6770 compcert.cfrontend.Ctypes <> Tstruct constr
R6778:6783 compcert.cfrontend.Ctypes <> noattr def
R6772:6776 VC.stack <> _cons def
R6759:6761 VST.veric.shares <> Ews def
R6812:6818 VC.Verif_triang <> listrep def
R6824:6824 VC.Verif_triang <> y var
R6685:6687 compcert.common.Values <> val ind
R6829:6831 Coq.Init.Datatypes <> nil constr
R6852:6855 VST.msl.seplog <> ::logic:x_'&&'_x not
R6836:6839 VST.msl.seplog <> ::logic:'!!'_x not
R6851:6851 VST.msl.seplog <> ::logic:'!!'_x not
R6841:6843 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6840:6840 VC.Verif_triang <> p var
R6844:6850 VST.veric.base <> nullval def
R6856:6858 VST.msl.seplog <> emp meth
prf 6873:6890 <> listrep_local_prop
R6918:6930 VST.msl.seplog <> :::x_'|--'_x not
R6906:6912 VC.Verif_triang <> listrep def
R6917:6917 VC.Verif_triang <> p var
R6914:6915 VC.Verif_triang <> il var
R6931:6934 VST.msl.seplog <> ::logic:'!!'_x not
R6982:6982 VST.msl.seplog <> ::logic:'!!'_x not
R6955:6960 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6981:6981 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6935:6952 VST.veric.val_lemmas <> is_pointer_or_null def
R6954:6954 VC.Verif_triang <> p var
R6970:6974 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R6962:6962 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6961:6961 VC.Verif_triang <> p var
R6963:6969 VST.veric.base <> nullval def
R6977:6977 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6975:6976 VC.Verif_triang <> il var
R6978:6980 Coq.Init.Datatypes <> nil constr
R7092:7115 VST.floyd.nested_field_lemmas <> field_compatible_nullval thm
R7092:7115 VST.floyd.nested_field_lemmas <> field_compatible_nullval thm
prf 7201:7221 <> listrep_valid_pointer
R7254:7258 VST.msl.seplog <> :::x_'|--'_x not
R7242:7248 VC.Verif_triang <> listrep def
R7253:7253 VC.Verif_triang <> p var
R7250:7251 VC.Verif_triang <> il var
R7259:7271 VST.veric.expr <> valid_pointer def
R7273:7273 VC.Verif_triang <> p var
def 7422:7426 <> stack
R7433:7436 Coq.Init.Datatypes <> list ind
R7438:7438 Coq.Numbers.BinNums <> Z ind
R7445:7447 compcert.common.Values <> val ind
R7454:7456 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R7458:7459 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R7463:7466 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R7554:7556 VST.msl.seplog <> ::logic:x_'*'_x not
R7509:7514 VST.msl.seplog <> ::logic:x_'*'_x not
R7467:7478 VST.floyd.library <> malloc_token defax
R7508:7508 VC.Verif_triang <> p var
R7485:7491 compcert.cfrontend.Ctypes <> Tstruct constr
R7500:7505 compcert.cfrontend.Ctypes <> noattr def
R7493:7498 VC.stack <> _stack def
R7480:7482 VST.veric.shares <> Ews def
R7515:7521 VST.floyd.field_at <> data_at def
R7553:7553 VC.Verif_triang <> p var
R7551:7551 VC.Verif_triang <> q var
R7528:7534 compcert.cfrontend.Ctypes <> Tstruct constr
R7543:7548 compcert.cfrontend.Ctypes <> noattr def
R7536:7541 VC.stack <> _stack def
R7523:7525 VST.veric.shares <> Ews def
R7557:7563 VC.Verif_triang <> listrep def
R7568:7568 VC.Verif_triang <> q var
R7565:7566 VC.Verif_triang <> il var
R7460:7462 compcert.common.Values <> val ind
prf 7578:7593 <> stack_local_prop
R7619:7624 VST.msl.seplog <> :::x_'|--'_x not
R7609:7613 VC.Verif_triang <> stack def
R7618:7618 VC.Verif_triang <> p var
R7615:7616 VC.Verif_triang <> il var
R7625:7628 VST.msl.seplog <> ::logic:'!!'_x not
R7636:7636 VST.msl.seplog <> ::logic:'!!'_x not
R7629:7633 VST.veric.val_lemmas <> isptr def
R7635:7635 VC.Verif_triang <> p var
prf 7730:7748 <> stack_valid_pointer
R7779:7783 VST.msl.seplog <> :::x_'|--'_x not
R7769:7773 VC.Verif_triang <> stack def
R7778:7778 VC.Verif_triang <> p var
R7775:7776 VC.Verif_triang <> il var
R7784:7796 VST.veric.expr <> valid_pointer def
R7798:7798 VC.Verif_triang <> p var
def 7899:7911 <> newstack_spec
R7920:7922 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R7915:7919 compcert.common.AST <> ident def
R7923:7929 VST.veric.mpred <> funspec ind
R7935:7942 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7952:7953 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7943:7951 VC.stack <> _newstack def
R7954:7958 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R7961:7962 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R7970:7984 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R8026:8034 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R8063:8070 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R8035:8038 compcert.exportclight.Clightdefs <> tptr def
R8041:8047 compcert.cfrontend.Ctypes <> Tstruct constr
R8056:8061 compcert.cfrontend.Ctypes <> noattr def
R8049:8054 VC.stack <> _stack def
R7963:7969 VST.veric.SeparationLogic <> globals def
R7985:7992 VST.floyd.canon <> :::'PROP'_'()'_x not
R7993:7999 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8008:8009 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8000:8004 VST.floyd.canon <> gvars constr
R8006:8007 VC.Verif_triang <> gv var
R8010:8014 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8025:8025 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8015:8021 VST.floyd.library <> mem_mgr defax
R8023:8024 VC.Verif_triang <> gv var
R8071:8073 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R8075:8076 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R8080:8081 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R8077:8079 compcert.common.Values <> val ind
R8082:8090 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R8091:8097 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8113:8114 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8098:8101 VST.floyd.canon <> temp constr
R8112:8112 VC.Verif_triang <> p var
R8103:8110 VST.veric.SeparationLogic <> ret_temp def
R8115:8119 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8131:8132 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8143:8143 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8120:8124 VC.Verif_triang <> stack def
R8130:8130 VC.Verif_triang <> p var
R8126:8128 Coq.Init.Datatypes <> nil constr
R8133:8139 VST.floyd.library <> mem_mgr defax
R8141:8142 VC.Verif_triang <> gv var
R8077:8079 compcert.common.Values <> val ind
def 8158:8166 <> push_spec
R8175:8177 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R8170:8174 compcert.common.AST <> ident def
R8178:8184 VST.veric.mpred <> funspec ind
R8190:8197 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R8203:8204 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R8198:8202 VC.stack <> _push def
R8205:8209 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8211:8212 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8216:8217 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8219:8220 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8222:8223 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8226:8227 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8234:8235 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8238:8239 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8247:8254 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8289:8290 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8301:8308 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8449:8457 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8463:8470 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8257:8260 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R8255:8256 VC.stack <> _p def
R8261:8264 compcert.exportclight.Clightdefs <> tptr def
R8267:8273 compcert.cfrontend.Ctypes <> Tstruct constr
R8282:8287 compcert.cfrontend.Ctypes <> noattr def
R8275:8280 VC.stack <> _stack def
R8293:8296 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R8291:8292 VC.stack <> _i def
R8297:8300 compcert.exportclight.Clightdefs <> tint def
R8458:8462 compcert.exportclight.Clightdefs <> tvoid def
R8213:8215 compcert.common.Values <> val ind
R8221:8221 Coq.Numbers.BinNums <> Z ind
R8228:8231 Coq.Init.Datatypes <> list ind
R8233:8233 Coq.Numbers.BinNums <> Z ind
R8240:8246 VST.veric.SeparationLogic <> globals def
R8309:8314 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R8352:8358 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R8329:8332 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R8334:8337 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R8315:8328 compcert.lib.Integers Int min_signed def
R8333:8333 VC.Verif_triang <> i var
R8333:8333 VC.Verif_triang <> i var
R8338:8351 compcert.lib.Integers Int max_signed def
R8359:8365 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8375:8376 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8404:8405 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8414:8420 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8366:8369 VST.floyd.canon <> temp constr
R8374:8374 VC.Verif_triang <> p var
R8371:8372 VC.stack <> _p def
R8377:8380 VST.floyd.canon <> temp constr
R8386:8389 compcert.common.Values <> Vint constr
R8392:8399 compcert.lib.Integers Int repr def
R8401:8401 VC.Verif_triang <> i var
R8382:8383 VC.stack <> _i def
R8406:8410 VST.floyd.canon <> gvars constr
R8412:8413 VC.Verif_triang <> gv var
R8421:8425 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8436:8437 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8448:8448 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8426:8430 VC.Verif_triang <> stack def
R8435:8435 VC.Verif_triang <> p var
R8432:8433 VC.Verif_triang <> il var
R8438:8444 VST.floyd.library <> mem_mgr defax
R8446:8447 VC.Verif_triang <> gv var
R8471:8479 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R8480:8488 VST.floyd.canon <> :::'LOCAL'_'()'_x not
R8489:8493 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8509:8510 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8521:8521 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8494:8498 VC.Verif_triang <> stack def
R8508:8508 VC.Verif_triang <> p var
R8502:8503 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R8501:8501 VC.Verif_triang <> i var
R8504:8505 VC.Verif_triang <> il var
R8511:8517 VST.floyd.library <> mem_mgr defax
R8519:8520 VC.Verif_triang <> gv var
def 8536:8543 <> pop_spec
R8552:8554 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R8547:8551 compcert.common.AST <> ident def
R8555:8561 VST.veric.mpred <> funspec ind
R8567:8574 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R8579:8580 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R8575:8578 VC.stack <> _pop def
R8581:8585 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8587:8588 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8592:8593 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8595:8596 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8598:8599 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8602:8603 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8610:8611 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8614:8615 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8623:8630 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8665:8672 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8752:8760 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8765:8772 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8633:8636 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R8631:8632 VC.stack <> _p def
R8637:8640 compcert.exportclight.Clightdefs <> tptr def
R8643:8649 compcert.cfrontend.Ctypes <> Tstruct constr
R8658:8663 compcert.cfrontend.Ctypes <> noattr def
R8651:8656 VC.stack <> _stack def
R8761:8764 compcert.exportclight.Clightdefs <> tint def
R8589:8591 compcert.common.Values <> val ind
R8597:8597 Coq.Numbers.BinNums <> Z ind
R8604:8607 Coq.Init.Datatypes <> list ind
R8609:8609 Coq.Numbers.BinNums <> Z ind
R8616:8622 VST.veric.SeparationLogic <> globals def
R8673:8685 VST.floyd.canon <> :::'PROP'_'()'_x not
R8686:8692 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8702:8703 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8712:8718 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8693:8696 VST.floyd.canon <> temp constr
R8701:8701 VC.Verif_triang <> p var
R8698:8699 VC.stack <> _p def
R8704:8708 VST.floyd.canon <> gvars constr
R8710:8711 VC.Verif_triang <> gv var
R8719:8723 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8739:8740 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8751:8751 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8724:8728 VC.Verif_triang <> stack def
R8738:8738 VC.Verif_triang <> p var
R8732:8733 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R8731:8731 VC.Verif_triang <> i var
R8734:8735 VC.Verif_triang <> il var
R8741:8747 VST.floyd.library <> mem_mgr defax
R8749:8750 VC.Verif_triang <> gv var
R8773:8781 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R8782:8788 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8822:8823 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8789:8792 VST.floyd.canon <> temp constr
R8804:8807 compcert.common.Values <> Vint constr
R8810:8817 compcert.lib.Integers Int repr def
R8819:8819 VC.Verif_triang <> i var
R8794:8801 VST.veric.SeparationLogic <> ret_temp def
R8824:8828 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8839:8840 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8851:8851 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R8829:8833 VC.Verif_triang <> stack def
R8838:8838 VC.Verif_triang <> p var
R8835:8836 VC.Verif_triang <> il var
R8841:8847 VST.floyd.library <> mem_mgr defax
R8849:8850 VC.Verif_triang <> gv var
def 9222:9241 <> push_increasing_spec
R9247:9254 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R9271:9272 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R9255:9270 VC.stack <> _push_increasing def
R9273:9277 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9280:9281 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9285:9286 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9288:9289 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9291:9292 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9295:9296 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9304:9311 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9347:9348 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9359:9364 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9492:9500 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9506:9511 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9315:9318 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R9312:9314 VC.stack <> _st def
R9319:9322 compcert.exportclight.Clightdefs <> tptr def
R9325:9331 compcert.cfrontend.Ctypes <> Tstruct constr
R9340:9345 compcert.cfrontend.Ctypes <> noattr def
R9333:9338 VC.stack <> _stack def
R9351:9354 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R9349:9350 VC.stack <> _n def
R9355:9358 compcert.exportclight.Clightdefs <> tint def
R9501:9505 compcert.exportclight.Clightdefs <> tvoid def
R9282:9284 compcert.common.Values <> val ind
R9290:9290 Coq.Numbers.BinNums <> Z ind
R9297:9303 VST.veric.SeparationLogic <> globals def
R9365:9370 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R9395:9399 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R9372:9375 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R9377:9380 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R9376:9376 VC.Verif_triang <> n var
R9376:9376 VC.Verif_triang <> n var
R9381:9394 compcert.lib.Integers Int max_signed def
R9400:9406 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R9418:9419 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R9447:9448 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R9457:9461 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R9407:9410 VST.floyd.canon <> temp constr
R9416:9417 VC.Verif_triang <> st var
R9412:9414 VC.stack <> _st def
R9420:9423 VST.floyd.canon <> temp constr
R9429:9432 compcert.common.Values <> Vint constr
R9435:9442 compcert.lib.Integers Int repr def
R9444:9444 VC.Verif_triang <> n var
R9425:9426 VC.stack <> _n def
R9449:9453 VST.floyd.canon <> gvars constr
R9455:9456 VC.Verif_triang <> gv var
R9462:9466 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R9479:9480 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R9491:9491 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R9467:9471 VC.Verif_triang <> stack def
R9477:9478 VC.Verif_triang <> st var
R9473:9475 Coq.Init.Datatypes <> nil constr
R9481:9487 VST.floyd.library <> mem_mgr defax
R9489:9490 VC.Verif_triang <> gv var
R9512:9518 VST.floyd.canon <> :::'PROP'_'()'_x not
R9519:9526 VST.floyd.canon <> :::'LOCAL'_'()'_x not
R9527:9531 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R9555:9556 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R9567:9567 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R9532:9536 VC.Verif_triang <> stack def
R9553:9554 VC.Verif_triang <> st var
R9539:9548 VC.Verif_triang <> decreasing thm
R9550:9550 VC.Verif_triang <> n var
R9557:9563 VST.floyd.library <> mem_mgr defax
R9565:9566 VC.Verif_triang <> gv var
def 9582:9597 <> pop_and_add_spec
R9603:9610 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R9623:9624 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R9611:9622 VC.stack <> _pop_and_add def
R9625:9629 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9632:9633 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9637:9638 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9641:9642 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9649:9650 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9653:9654 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9662:9669 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9705:9706 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9717:9722 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9951:9959 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9964:9969 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R9673:9676 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R9670:9672 VC.stack <> _st def
R9677:9680 compcert.exportclight.Clightdefs <> tptr def
R9683:9689 compcert.cfrontend.Ctypes <> Tstruct constr
R9698:9703 compcert.cfrontend.Ctypes <> noattr def
R9691:9696 VC.stack <> _stack def
R9709:9712 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R9707:9708 VC.stack <> _n def
R9713:9716 compcert.exportclight.Clightdefs <> tint def
R9960:9963 compcert.exportclight.Clightdefs <> tint def
R9634:9636 compcert.common.Values <> val ind
R9643:9646 Coq.Init.Datatypes <> list ind
R9648:9648 Coq.Numbers.BinNums <> Z ind
R9655:9661 VST.veric.SeparationLogic <> globals def
R9723:9728 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R9757:9771 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R9790:9804 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R9834:9838 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R9739:9742 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R9729:9735 Coq.ZArith.Zcomplements <> Zlength def
R9737:9738 VC.Verif_triang <> il var
R9743:9756 compcert.lib.Integers Int max_signed def
R9772:9777 Coq.Lists.List <> Forall ind
R9788:9789 VC.Verif_triang <> il var
R9780:9783 Coq.ZArith.BinInt Z le def
R9816:9819 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R9805:9812 VC.Verif_triang <> add_list def
R9814:9815 VC.Verif_triang <> il var
R9820:9833 compcert.lib.Integers Int max_signed def
R9839:9845 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R9857:9858 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R9897:9908 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R9917:9921 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R9846:9849 VST.floyd.canon <> temp constr
R9855:9856 VC.Verif_triang <> st var
R9851:9853 VC.stack <> _st def
R9859:9862 VST.floyd.canon <> temp constr
R9868:9871 compcert.common.Values <> Vint constr
R9874:9881 compcert.lib.Integers Int repr def
R9884:9890 Coq.ZArith.Zcomplements <> Zlength def
R9892:9893 VC.Verif_triang <> il var
R9864:9865 VC.stack <> _n def
R9909:9913 VST.floyd.canon <> gvars constr
R9915:9916 VC.Verif_triang <> gv var
R9922:9926 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R9938:9939 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R9950:9950 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R9927:9931 VC.Verif_triang <> stack def
R9936:9937 VC.Verif_triang <> st var
R9933:9934 VC.Verif_triang <> il var
R9940:9946 VST.floyd.library <> mem_mgr defax
R9948:9949 VC.Verif_triang <> gv var
R9970:9980 VST.floyd.canon <> :::'PROP'_'()'_x not
R9981:9986 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R10032:10036 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R9987:9990 VST.floyd.canon <> temp constr
R10002:10005 compcert.common.Values <> Vint constr
R10008:10015 compcert.lib.Integers Int repr def
R10018:10025 VC.Verif_triang <> add_list def
R10027:10028 VC.Verif_triang <> il var
R9992:9999 VST.veric.SeparationLogic <> ret_temp def
R10037:10041 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R10054:10055 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R10066:10066 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R10042:10046 VC.Verif_triang <> stack def
R10052:10053 VC.Verif_triang <> st var
R10048:10050 Coq.Init.Datatypes <> nil constr
R10056:10062 VST.floyd.library <> mem_mgr defax
R10064:10065 VC.Verif_triang <> gv var
def 10081:10089 <> main_spec
R10095:10102 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R10108:10109 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R10103:10107 VC.stack <> _main def
R10110:10114 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R10117:10118 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R10126:10135 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R10156:10164 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R10169:10175 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R10165:10168 compcert.exportclight.Clightdefs <> tint def
R10119:10125 VST.veric.SeparationLogic <> globals def
R10136:10143 VST.veric.SeparationLogic <> main_pre def
R10154:10155 VC.Verif_triang <> gv var
R10150:10152 Coq.Init.Datatypes <> nil constr
R10145:10148 VC.stack <> prog def
R10176:10183 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R10184:10190 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R10225:10226 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R10191:10194 VST.floyd.canon <> temp constr
R10206:10209 compcert.common.Values <> Vint constr
R10212:10219 compcert.lib.Integers Int repr def
R10196:10203 VST.veric.SeparationLogic <> ret_temp def
R10227:10231 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R10234:10235 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R10232:10233 VST.msl.seplog <> TT meth
def 10292:10296 <> Gprog
R10300:10307 VST.veric.mpred <> funspecs def
R10344:10364 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10378:10379 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10389:10390 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10399:10420 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10441:10442 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10459:10460 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10470:10472 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10365:10377 VC.Verif_triang <> newstack_spec def
R10380:10388 VC.Verif_triang <> push_spec def
R10391:10398 VC.Verif_triang <> pop_spec def
R10421:10440 VC.Verif_triang <> push_increasing_spec def
R10443:10458 VC.Verif_triang <> pop_and_add_spec def
R10461:10469 VC.Verif_triang <> main_spec def
R10339:10342 VC.stack <> prog def
R10344:10364 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10378:10379 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10389:10390 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10399:10420 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10441:10442 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10459:10460 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10470:10472 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R10365:10377 VC.Verif_triang <> newstack_spec def
R10380:10388 VC.Verif_triang <> push_spec def
R10391:10398 VC.Verif_triang <> pop_spec def
R10421:10440 VC.Verif_triang <> push_increasing_spec def
R10443:10458 VC.Verif_triang <> pop_and_add_spec def
R10461:10469 VC.Verif_triang <> main_spec def
prf 10673:10692 <> body_push_increasing
R10695:10704 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R10736:10755 VC.Verif_triang <> push_increasing_spec def
R10718:10734 VC.stack <> f_push_increasing def
R10712:10716 VC.Verif_triang <> Gprog def
R10706:10710 VC.Verif_triang <> Vprog def
prf 10863:10874 <> add_list_app
R10910:10912 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10893:10900 VC.Verif_triang <> add_list def
R10905:10906 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R10903:10904 VC.Verif_triang <> al var
R10907:10908 VC.Verif_triang <> bl var
R10924:10926 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R10913:10920 VC.Verif_triang <> add_list def
R10922:10923 VC.Verif_triang <> al var
R10927:10934 VC.Verif_triang <> add_list def
R10936:10937 VC.Verif_triang <> bl var
prf 10976:10990 <> add_list_nonneg
R11025:11030 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11032:11035 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R11036:11043 VC.Verif_triang <> add_list def
R11045:11046 VC.Verif_triang <> il var
R11007:11012 Coq.Lists.List <> Forall ind
R11023:11024 VC.Verif_triang <> il var
R11015:11018 Coq.ZArith.BinInt Z le def
prf 11162:11184 <> add_list_sublist_bounds
R11222:11227 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11244:11249 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11268:11273 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11295:11300 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11302:11305 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R11333:11336 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R11306:11313 VC.Verif_triang <> add_list def
R11316:11322 VST.floyd.sublist <> sublist def
R11330:11331 VC.Verif_triang <> il var
R11327:11328 VC.Verif_triang <> hi var
R11324:11325 VC.Verif_triang <> lo var
R11306:11313 VC.Verif_triang <> add_list def
R11316:11322 VST.floyd.sublist <> sublist def
R11330:11331 VC.Verif_triang <> il var
R11327:11328 VC.Verif_triang <> hi var
R11324:11325 VC.Verif_triang <> lo var
R11337:11337 VC.Verif_triang <> K var
R11275:11278 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R11290:11293 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R11279:11286 VC.Verif_triang <> add_list def
R11288:11289 VC.Verif_triang <> il var
R11279:11286 VC.Verif_triang <> add_list def
R11288:11289 VC.Verif_triang <> il var
R11294:11294 VC.Verif_triang <> K var
R11250:11255 Coq.Lists.List <> Forall ind
R11266:11267 VC.Verif_triang <> il var
R11258:11261 Coq.ZArith.BinInt Z le def
R11230:11233 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R11228:11229 VC.Verif_triang <> hi var
R11234:11240 Coq.ZArith.Zcomplements <> Zlength def
R11242:11243 VC.Verif_triang <> il var
R11210:11213 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R11216:11219 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R11214:11215 VC.Verif_triang <> lo var
R11214:11215 VC.Verif_triang <> lo var
R11220:11221 VC.Verif_triang <> hi var
prf 12353:12363 <> add_another
R12400:12406 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12436:12441 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12453:12453 Coq.Numbers.BinNums <> Z ind
R12477:12482 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12497:12500 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12597:12600 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12483:12496 compcert.lib.Integers Int min_signed def
R12550:12563 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12501:12510 compcert.lib.Integers Int signed def
R12513:12520 compcert.lib.Integers Int repr def
R12523:12530 VC.Verif_triang <> add_list def
R12533:12539 VST.floyd.sublist <> sublist def
R12545:12546 VC.Verif_triang <> il var
R12543:12543 VC.Verif_triang <> i var
R12564:12573 compcert.lib.Integers Int signed def
R12576:12583 compcert.lib.Integers Int repr def
R12586:12589 VST.floyd.sublist <> Znth def
R12593:12594 VC.Verif_triang <> il var
R12591:12591 VC.Verif_triang <> i var
R12550:12563 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12501:12510 compcert.lib.Integers Int signed def
R12513:12520 compcert.lib.Integers Int repr def
R12523:12530 VC.Verif_triang <> add_list def
R12533:12539 VST.floyd.sublist <> sublist def
R12545:12546 VC.Verif_triang <> il var
R12543:12543 VC.Verif_triang <> i var
R12564:12573 compcert.lib.Integers Int signed def
R12576:12583 compcert.lib.Integers Int repr def
R12586:12589 VST.floyd.sublist <> Znth def
R12593:12594 VC.Verif_triang <> il var
R12591:12591 VC.Verif_triang <> i var
R12601:12614 compcert.lib.Integers Int max_signed def
R12459:12462 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R12464:12466 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R12463:12463 VC.Verif_triang <> i var
R12463:12463 VC.Verif_triang <> i var
R12467:12473 Coq.ZArith.Zcomplements <> Zlength def
R12475:12476 VC.Verif_triang <> il var
R12418:12421 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R12407:12414 VC.Verif_triang <> add_list def
R12416:12417 VC.Verif_triang <> il var
R12422:12435 compcert.lib.Integers Int max_signed def
R12382:12387 Coq.Lists.List <> Forall ind
R12398:12399 VC.Verif_triang <> il var
R12390:12393 Coq.ZArith.BinInt Z le def
R12641:12644 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R12645:12652 VC.Verif_triang <> add_list def
R12641:12644 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R12645:12652 VC.Verif_triang <> add_list def
R12702:12705 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12731:12734 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12706:12713 VC.Verif_triang <> add_list def
R12716:12722 VST.floyd.sublist <> sublist def
R12706:12713 VC.Verif_triang <> add_list def
R12716:12722 VST.floyd.sublist <> sublist def
R12735:12748 compcert.lib.Integers Int max_signed def
R12702:12705 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12731:12734 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12706:12713 VC.Verif_triang <> add_list def
R12716:12722 VST.floyd.sublist <> sublist def
R12706:12713 VC.Verif_triang <> add_list def
R12716:12722 VST.floyd.sublist <> sublist def
R12735:12748 compcert.lib.Integers Int max_signed def
R12800:12803 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12833:12836 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12804:12811 VC.Verif_triang <> add_list def
R12814:12820 VST.floyd.sublist <> sublist def
R12826:12826 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12804:12811 VC.Verif_triang <> add_list def
R12814:12820 VST.floyd.sublist <> sublist def
R12826:12826 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12837:12850 compcert.lib.Integers Int max_signed def
R12800:12803 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12833:12836 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12804:12811 VC.Verif_triang <> add_list def
R12814:12820 VST.floyd.sublist <> sublist def
R12826:12826 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12804:12811 VC.Verif_triang <> add_list def
R12814:12820 VST.floyd.sublist <> sublist def
R12826:12826 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12837:12850 compcert.lib.Integers Int max_signed def
R12898:12901 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12911:12914 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12902:12905 VST.floyd.sublist <> Znth def
R12902:12905 VST.floyd.sublist <> Znth def
R12915:12928 compcert.lib.Integers Int max_signed def
R12898:12901 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12911:12914 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12902:12905 VST.floyd.sublist <> Znth def
R12902:12905 VST.floyd.sublist <> Znth def
R12915:12928 compcert.lib.Integers Int max_signed def
R12945:12948 VST.floyd.sublist <> Znth def
R12962:12969 VC.Verif_triang <> add_list def
R12972:12978 VST.floyd.sublist <> sublist def
R12984:12984 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12945:12948 VST.floyd.sublist <> Znth def
R12962:12969 VC.Verif_triang <> add_list def
R12972:12978 VST.floyd.sublist <> sublist def
R12984:12984 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R13221:13235 compcert.lib.Integers Int signed_repr thm
R13366:13380 compcert.lib.Integers Int signed_repr thm
R13366:13380 compcert.lib.Integers Int signed_repr thm
R13366:13380 compcert.lib.Integers Int signed_repr thm
R13546:13560 compcert.lib.Integers Int signed_repr thm
R13546:13560 compcert.lib.Integers Int signed_repr thm
R13546:13560 compcert.lib.Integers Int signed_repr thm
R13586:13598 VST.floyd.sublist <> sublist_split thm
R13606:13606 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R13586:13598 VST.floyd.sublist <> sublist_split thm
R13606:13606 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R13586:13598 VST.floyd.sublist <> sublist_split thm
R13606:13606 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R13640:13651 VC.Verif_triang <> add_list_app prfax
R13640:13651 VC.Verif_triang <> add_list_app prfax
R13640:13651 VC.Verif_triang <> add_list_app prfax
R13668:13680 VST.floyd.sublist <> sublist_len_1 thm
R13668:13680 VST.floyd.sublist <> sublist_len_1 thm
R13668:13680 VST.floyd.sublist <> sublist_len_1 thm
prf 13833:13848 <> body_pop_and_add
R13851:13860 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R13888:13903 VC.Verif_triang <> pop_and_add_spec def
R13874:13886 VC.stack <> f_pop_and_add def
R13868:13872 VC.Verif_triang <> Gprog def
R13862:13866 VC.Verif_triang <> Vprog def
R13962:13964 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R13966:13966 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R13968:13973 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R13974:13978 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R13999:14004 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R13980:13983 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R13985:13988 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R13984:13984 VC.Verif_triang <> i var
R13984:13984 VC.Verif_triang <> i var
R13989:13995 Coq.ZArith.Zcomplements <> Zlength def
R14005:14011 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R14023:14035 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R14063:14075 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R14114:14124 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R14133:14137 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R14012:14015 VST.floyd.canon <> temp constr
R14017:14019 VC.stack <> _st def
R14036:14039 VST.floyd.canon <> temp constr
R14045:14048 compcert.common.Values <> Vint constr
R14051:14058 compcert.lib.Integers Int repr def
R14060:14060 VC.Verif_triang <> i var
R14041:14042 VC.stack <> _i def
R14076:14079 VST.floyd.canon <> temp constr
R14085:14088 compcert.common.Values <> Vint constr
R14091:14098 compcert.lib.Integers Int repr def
R14101:14107 Coq.ZArith.Zcomplements <> Zlength def
R14081:14082 VC.stack <> _n def
R14125:14129 VST.floyd.canon <> gvars constr
R14138:14142 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R14179:14180 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R14191:14191 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R14143:14147 VC.Verif_triang <> stack def
R14150:14156 VST.floyd.sublist <> sublist def
R14161:14167 Coq.ZArith.Zcomplements <> Zlength def
R14158:14158 VC.Verif_triang <> i var
R14181:14187 VST.floyd.library <> mem_mgr defax
R13967:13967 Coq.Numbers.BinNums <> Z ind
R13962:13964 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R13966:13966 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R13968:13973 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R13974:13978 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R13999:14004 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R13980:13983 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R13985:13988 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R13984:13984 VC.Verif_triang <> i var
R13984:13984 VC.Verif_triang <> i var
R13989:13995 Coq.ZArith.Zcomplements <> Zlength def
R14005:14011 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R14023:14035 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R14063:14075 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R14114:14124 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R14133:14137 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R14012:14015 VST.floyd.canon <> temp constr
R14017:14019 VC.stack <> _st def
R14036:14039 VST.floyd.canon <> temp constr
R14045:14048 compcert.common.Values <> Vint constr
R14051:14058 compcert.lib.Integers Int repr def
R14060:14060 VC.Verif_triang <> i var
R14041:14042 VC.stack <> _i def
R14076:14079 VST.floyd.canon <> temp constr
R14085:14088 compcert.common.Values <> Vint constr
R14091:14098 compcert.lib.Integers Int repr def
R14101:14107 Coq.ZArith.Zcomplements <> Zlength def
R14081:14082 VC.stack <> _n def
R14125:14129 VST.floyd.canon <> gvars constr
R14138:14142 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R14179:14180 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R14191:14191 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R14143:14147 VC.Verif_triang <> stack def
R14150:14156 VST.floyd.sublist <> sublist def
R14161:14167 Coq.ZArith.Zcomplements <> Zlength def
R14158:14158 VC.Verif_triang <> i var
R14181:14187 VST.floyd.library <> mem_mgr defax
R13967:13967 Coq.Numbers.BinNums <> Z ind
R14432:14432 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14435:14436 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14446:14447 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14477:14478 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14481:14481 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14437:14440 VST.floyd.sublist <> Znth def
R14448:14454 VST.floyd.sublist <> sublist def
R14463:14469 Coq.ZArith.Zcomplements <> Zlength def
R14458:14458 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R14432:14432 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14435:14436 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14446:14447 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14477:14478 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14481:14481 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14437:14440 VST.floyd.sublist <> Znth def
R14448:14454 VST.floyd.sublist <> sublist def
R14463:14469 Coq.ZArith.Zcomplements <> Zlength def
R14458:14458 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
prf 15685:15700 <> body_pop_and_add
R15703:15712 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R15740:15755 VC.Verif_triang <> pop_and_add_spec def
R15726:15738 VC.stack <> f_pop_and_add def
R15720:15724 VC.Verif_triang <> Gprog def
R15714:15718 VC.Verif_triang <> Vprog def
prf 15983:15991 <> body_main
R15994:16003 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R16024:16032 VC.Verif_triang <> main_spec def
R16017:16022 VC.stack <> f_main def
R16011:16015 VC.Verif_triang <> Gprog def
R16005:16009 VC.Verif_triang <> Vprog def
R16488:16501 VST.floyd.library <> create_mem_mgr prfax
R16488:16501 VST.floyd.library <> create_mem_mgr prfax
