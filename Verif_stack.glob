DIGEST cbbb9fe1a9f8ea427b5be23fc00c3da5
FVC.Verif_stack
R1290:1308 VST.floyd.proofauto <> <> lib
R1326:1342 VST.floyd.library <> <> lib
R1360:1367 VC.stack <> <> lib
inst 1379:1387 <> CompSpecs
R1391:1399 VST.veric.mpred <> compspecs class
R1417:1420 VC.stack <> prog def
def 1443:1447 <> Vprog
R1451:1458 VST.veric.mpred <> varspecs def
R1474:1477 VC.stack <> prog def
R1504:1511 VC.hints <> <> lib
def 2893:2911 <> malloc_spec_example
R2918:2925 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R2933:2934 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R2926:2932 VC.stack <> _malloc def
R2935:2939 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2941:2941 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2946:2953 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2973:2979 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3187:3195 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3206:3208 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2964:2967 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R2968:2972 compcert.exportclight.Clightdefs <> tuint def
R3196:3199 compcert.exportclight.Clightdefs <> tptr def
R3201:3205 compcert.exportclight.Clightdefs <> tvoid def
R2942:2945 compcert.cfrontend.Ctypes <> type ind
R2980:2985 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R3019:3030 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R3064:3075 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R3118:3123 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R2987:2990 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R2999:3002 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R2991:2996 compcert.cfrontend.Ctypes <> sizeof def
R2998:2998 VC.Verif_stack <> t var
R2991:2996 compcert.cfrontend.Ctypes <> sizeof def
R2998:2998 VC.Verif_stack <> t var
R3003:3018 compcert.lib.Integers Int max_unsigned def
R3057:3059 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3031:3054 VST.veric.composite_compute <> complete_legal_cosu_type def
R3056:3056 VC.Verif_stack <> t var
R3060:3063 Coq.Init.Datatypes <> true constr
R3111:3113 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3076:3090 VST.floyd.field_at <> natural_aligned def
R3110:3110 VC.Verif_stack <> t var
R3092:3108 VST.floyd.field_at <> natural_alignment def
R3114:3117 Coq.Init.Datatypes <> true constr
R3124:3130 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3175:3180 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3131:3134 VST.floyd.canon <> temp constr
R3148:3151 compcert.common.Values <> Vint constr
R3154:3161 compcert.lib.Integers Int repr def
R3164:3169 compcert.cfrontend.Ctypes <> sizeof def
R3171:3171 VC.Verif_stack <> t var
R3181:3186 VST.floyd.canon <> :::'SEP'_'()' not
R3209:3211 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R3213:3213 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R3215:3220 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R3221:3232 VST.floyd.canon <> :::'PROP'_'()'_x not
R3233:3239 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3255:3260 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3240:3243 VST.floyd.canon <> temp constr
R3254:3254 VC.Verif_stack <> p var
R3245:3252 VST.veric.SeparationLogic <> ret_temp def
R3261:3265 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R3350:3350 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R3269:3274 VST.msl.eq_dec <> eq_dec def
R3278:3284 VST.veric.base <> nullval def
R3276:3276 VC.Verif_stack <> p var
R3330:3332 VST.msl.seplog <> ::logic:x_'*'_x not
R3310:3321 VST.floyd.library <> malloc_token defax
R3329:3329 VC.Verif_stack <> p var
R3327:3327 VC.Verif_stack <> t var
R3323:3325 VST.veric.shares <> Ews def
R3333:3340 VST.floyd.field_at <> data_at_ def
R3348:3348 VC.Verif_stack <> p var
R3346:3346 VC.Verif_stack <> t var
R3342:3344 VST.veric.shares <> Ews def
R3291:3293 VST.msl.seplog <> emp meth
def 3365:3381 <> free_spec_example
R3387:3394 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R3400:3401 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R3395:3399 VC.stack <> _free def
R3402:3406 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3408:3409 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3414:3415 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3417:3417 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3421:3428 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3453:3460 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3549:3557 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3563:3570 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3439:3442 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R3443:3446 compcert.exportclight.Clightdefs <> tptr def
R3448:3452 compcert.exportclight.Clightdefs <> tvoid def
R3558:3562 compcert.cfrontend.Ctypes <> Tvoid constr
R3410:3413 compcert.cfrontend.Ctypes <> type ind
R3418:3420 compcert.common.Values <> val ind
R3461:3473 VST.floyd.canon <> :::'PROP'_'()'_x not
R3474:3480 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3498:3504 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3481:3484 VST.floyd.canon <> temp constr
R3497:3497 VC.Verif_stack <> p var
R3505:3509 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R3530:3531 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R3548:3548 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R3510:3521 VST.floyd.library <> malloc_token defax
R3529:3529 VC.Verif_stack <> p var
R3527:3527 VC.Verif_stack <> t var
R3523:3525 VST.veric.shares <> Ews def
R3532:3539 VST.floyd.field_at <> data_at_ def
R3547:3547 VC.Verif_stack <> p var
R3545:3545 VC.Verif_stack <> t var
R3541:3543 VST.veric.shares <> Ews def
R3571:3578 VST.floyd.canon <> :::'PROP'_'()'_x not
R3579:3587 VST.floyd.canon <> :::'LOCAL'_'()'_x not
R3588:3593 VST.floyd.canon <> :::'SEP'_'()' not
def 4509:4515 <> listrep
R4522:4525 Coq.Init.Datatypes <> list ind
R4527:4527 Coq.Numbers.BinNums <> Z ind
R4534:4536 compcert.common.Values <> val ind
R4541:4545 VST.veric.mpred <> mpred def
R4557:4558 VC.Verif_stack <> il var
R4569:4570 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R4578:4580 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R4582:4583 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R4587:4597 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R4708:4710 VST.msl.seplog <> ::logic:x_'*'_x not
R4639:4649 VST.msl.seplog <> ::logic:x_'*'_x not
R4598:4609 VST.floyd.library <> malloc_token defax
R4638:4638 VC.Verif_stack <> p var
R4616:4622 compcert.cfrontend.Ctypes <> Tstruct constr
R4630:4635 compcert.cfrontend.Ctypes <> noattr def
R4624:4628 VC.stack <> _cons def
R4611:4613 VST.veric.shares <> Ews def
R4650:4656 VST.floyd.field_at <> data_at def
R4707:4707 VC.Verif_stack <> p var
R4685:4685 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4703:4703 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4705:4705 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4686:4689 compcert.common.Values <> Vint constr
R4692:4699 compcert.lib.Integers Int repr def
R4704:4704 VC.Verif_stack <> y var
R4663:4669 compcert.cfrontend.Ctypes <> Tstruct constr
R4677:4682 compcert.cfrontend.Ctypes <> noattr def
R4671:4675 VC.stack <> _cons def
R4658:4660 VST.veric.shares <> Ews def
R4711:4717 VC.Verif_stack <> listrep def
R4723:4723 VC.Verif_stack <> y var
R4584:4586 compcert.common.Values <> val ind
R4728:4730 Coq.Init.Datatypes <> nil constr
R4751:4754 VST.msl.seplog <> ::logic:x_'&&'_x not
R4735:4738 VST.msl.seplog <> ::logic:'!!'_x not
R4750:4750 VST.msl.seplog <> ::logic:'!!'_x not
R4740:4742 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4739:4739 VC.Verif_stack <> p var
R4743:4749 VST.veric.base <> nullval def
R4755:4757 VST.msl.seplog <> emp meth
R4907:4913 VC.Verif_stack <> listrep def
prf 5106:5123 <> listrep_local_prop
R5151:5163 VST.msl.seplog <> :::x_'|--'_x not
R5139:5145 VC.Verif_stack <> listrep def
R5150:5150 VC.Verif_stack <> p var
R5147:5148 VC.Verif_stack <> il var
R5164:5167 VST.msl.seplog <> ::logic:'!!'_x not
R5215:5215 VST.msl.seplog <> ::logic:'!!'_x not
R5188:5193 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5214:5214 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5168:5185 VST.veric.val_lemmas <> is_pointer_or_null def
R5187:5187 VC.Verif_stack <> p var
R5203:5207 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R5195:5195 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5194:5194 VC.Verif_stack <> p var
R5196:5202 VST.veric.base <> nullval def
R5210:5210 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5208:5209 VC.Verif_stack <> il var
R5211:5213 Coq.Init.Datatypes <> nil constr
prf 5411:5431 <> listrep_valid_pointer
R5464:5468 VST.msl.seplog <> :::x_'|--'_x not
R5452:5458 VC.Verif_stack <> listrep def
R5463:5463 VC.Verif_stack <> p var
R5460:5461 VC.Verif_stack <> il var
R5469:5481 VST.veric.expr <> valid_pointer def
R5483:5483 VC.Verif_stack <> p var
def 6202:6206 <> stack
R6213:6216 Coq.Init.Datatypes <> list ind
R6218:6218 Coq.Numbers.BinNums <> Z ind
R6225:6227 compcert.common.Values <> val ind
R6234:6236 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R6238:6239 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R6243:6246 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R6334:6338 VST.msl.seplog <> ::logic:x_'*'_x not
R6289:6294 VST.msl.seplog <> ::logic:x_'*'_x not
R6247:6258 VST.floyd.library <> malloc_token defax
R6288:6288 VC.Verif_stack <> p var
R6265:6271 compcert.cfrontend.Ctypes <> Tstruct constr
R6280:6285 compcert.cfrontend.Ctypes <> noattr def
R6273:6278 VC.stack <> _stack def
R6260:6262 VST.veric.shares <> Ews def
R6295:6301 VST.floyd.field_at <> data_at def
R6333:6333 VC.Verif_stack <> p var
R6331:6331 VC.Verif_stack <> q var
R6308:6314 compcert.cfrontend.Ctypes <> Tstruct constr
R6323:6328 compcert.cfrontend.Ctypes <> noattr def
R6316:6321 VC.stack <> _stack def
R6303:6305 VST.veric.shares <> Ews def
R6339:6345 VC.Verif_stack <> listrep def
R6350:6350 VC.Verif_stack <> q var
R6347:6348 VC.Verif_stack <> il var
R6240:6242 compcert.common.Values <> val ind
R6364:6368 VC.Verif_stack <> stack def
prf 6456:6471 <> stack_local_prop
R6497:6502 VST.msl.seplog <> :::x_'|--'_x not
R6487:6491 VC.Verif_stack <> stack def
R6496:6496 VC.Verif_stack <> p var
R6493:6494 VC.Verif_stack <> il var
R6503:6506 VST.msl.seplog <> ::logic:'!!'_x not
R6514:6514 VST.msl.seplog <> ::logic:'!!'_x not
R6507:6511 VST.veric.val_lemmas <> isptr def
R6513:6513 VC.Verif_stack <> p var
prf 6601:6619 <> stack_valid_pointer
R6650:6654 VST.msl.seplog <> :::x_'|--'_x not
R6640:6644 VC.Verif_stack <> stack def
R6649:6649 VC.Verif_stack <> p var
R6646:6647 VC.Verif_stack <> il var
R6655:6667 VST.veric.expr <> valid_pointer def
R6669:6669 VC.Verif_stack <> p var
def 6905:6917 <> newstack_spec
R6926:6928 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R6921:6925 compcert.common.AST <> ident def
R6929:6935 VST.veric.mpred <> funspec ind
R6941:6948 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R6958:6959 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R6949:6957 VC.stack <> _newstack def
R6960:6964 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R6967:6968 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R6976:6990 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R7032:7040 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R7069:7076 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R7041:7044 compcert.exportclight.Clightdefs <> tptr def
R7047:7053 compcert.cfrontend.Ctypes <> Tstruct constr
R7062:7067 compcert.cfrontend.Ctypes <> noattr def
R7055:7060 VC.stack <> _stack def
R6969:6975 VST.veric.SeparationLogic <> globals def
R6991:6998 VST.floyd.canon <> :::'PROP'_'()'_x not
R6999:7005 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7014:7015 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7006:7010 VST.floyd.canon <> gvars constr
R7012:7013 VC.Verif_stack <> gv var
R7016:7020 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7031:7031 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7021:7027 VST.floyd.library <> mem_mgr defax
R7029:7030 VC.Verif_stack <> gv var
R7077:7079 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R7081:7082 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R7086:7087 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R7083:7085 compcert.common.Values <> val ind
R7088:7096 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R7097:7103 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7119:7120 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7104:7107 VST.floyd.canon <> temp constr
R7118:7118 VC.Verif_stack <> p var
R7109:7116 VST.veric.SeparationLogic <> ret_temp def
R7121:7125 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7137:7138 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7149:7149 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7126:7130 VC.Verif_stack <> stack def
R7136:7136 VC.Verif_stack <> p var
R7132:7134 Coq.Init.Datatypes <> nil constr
R7139:7145 VST.floyd.library <> mem_mgr defax
R7147:7148 VC.Verif_stack <> gv var
R7083:7085 compcert.common.Values <> val ind
def 7164:7172 <> push_spec
R7181:7183 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R7176:7180 compcert.common.AST <> ident def
R7184:7190 VST.veric.mpred <> funspec ind
R7196:7203 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7209:7210 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7204:7208 VC.stack <> _push def
R7211:7215 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7217:7218 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7222:7223 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7225:7226 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7228:7229 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7232:7233 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7240:7241 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7244:7245 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7253:7260 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7295:7296 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7307:7314 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7455:7463 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7469:7476 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7263:7266 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R7261:7262 VC.stack <> _p def
R7267:7270 compcert.exportclight.Clightdefs <> tptr def
R7273:7279 compcert.cfrontend.Ctypes <> Tstruct constr
R7288:7293 compcert.cfrontend.Ctypes <> noattr def
R7281:7286 VC.stack <> _stack def
R7299:7302 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R7297:7298 VC.stack <> _i def
R7303:7306 compcert.exportclight.Clightdefs <> tint def
R7464:7468 compcert.exportclight.Clightdefs <> tvoid def
R7219:7221 compcert.common.Values <> val ind
R7227:7227 Coq.Numbers.BinNums <> Z ind
R7234:7237 Coq.Init.Datatypes <> list ind
R7239:7239 Coq.Numbers.BinNums <> Z ind
R7246:7252 VST.veric.SeparationLogic <> globals def
R7315:7320 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7358:7364 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7335:7338 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7340:7343 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7321:7334 compcert.lib.Integers Int min_signed def
R7339:7339 VC.Verif_stack <> i var
R7339:7339 VC.Verif_stack <> i var
R7344:7357 compcert.lib.Integers Int max_signed def
R7365:7371 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7381:7382 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7410:7411 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7420:7426 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7372:7375 VST.floyd.canon <> temp constr
R7380:7380 VC.Verif_stack <> p var
R7377:7378 VC.stack <> _p def
R7383:7386 VST.floyd.canon <> temp constr
R7392:7395 compcert.common.Values <> Vint constr
R7398:7405 compcert.lib.Integers Int repr def
R7407:7407 VC.Verif_stack <> i var
R7388:7389 VC.stack <> _i def
R7412:7416 VST.floyd.canon <> gvars constr
R7418:7419 VC.Verif_stack <> gv var
R7427:7431 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7442:7443 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7454:7454 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7432:7436 VC.Verif_stack <> stack def
R7441:7441 VC.Verif_stack <> p var
R7438:7439 VC.Verif_stack <> il var
R7444:7450 VST.floyd.library <> mem_mgr defax
R7452:7453 VC.Verif_stack <> gv var
R7477:7485 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R7486:7494 VST.floyd.canon <> :::'LOCAL'_'()'_x not
R7495:7499 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7515:7516 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7527:7527 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7500:7504 VC.Verif_stack <> stack def
R7514:7514 VC.Verif_stack <> p var
R7508:7509 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R7507:7507 VC.Verif_stack <> i var
R7510:7511 VC.Verif_stack <> il var
R7517:7523 VST.floyd.library <> mem_mgr defax
R7525:7526 VC.Verif_stack <> gv var
def 7542:7549 <> pop_spec
R7558:7560 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R7553:7557 compcert.common.AST <> ident def
R7561:7567 VST.veric.mpred <> funspec ind
R7573:7580 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7585:7586 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7581:7584 VC.stack <> _pop def
R7587:7591 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7593:7594 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7598:7599 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7601:7602 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7604:7605 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7608:7609 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7616:7617 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7620:7621 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7629:7636 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7671:7678 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7758:7766 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7771:7778 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7639:7642 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R7637:7638 VC.stack <> _p def
R7643:7646 compcert.exportclight.Clightdefs <> tptr def
R7649:7655 compcert.cfrontend.Ctypes <> Tstruct constr
R7664:7669 compcert.cfrontend.Ctypes <> noattr def
R7657:7662 VC.stack <> _stack def
R7767:7770 compcert.exportclight.Clightdefs <> tint def
R7595:7597 compcert.common.Values <> val ind
R7603:7603 Coq.Numbers.BinNums <> Z ind
R7610:7613 Coq.Init.Datatypes <> list ind
R7615:7615 Coq.Numbers.BinNums <> Z ind
R7622:7628 VST.veric.SeparationLogic <> globals def
R7679:7691 VST.floyd.canon <> :::'PROP'_'()'_x not
R7692:7698 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7708:7709 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7718:7724 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7699:7702 VST.floyd.canon <> temp constr
R7707:7707 VC.Verif_stack <> p var
R7704:7705 VC.stack <> _p def
R7710:7714 VST.floyd.canon <> gvars constr
R7716:7717 VC.Verif_stack <> gv var
R7725:7729 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7745:7746 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7757:7757 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7730:7734 VC.Verif_stack <> stack def
R7744:7744 VC.Verif_stack <> p var
R7738:7739 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R7737:7737 VC.Verif_stack <> i var
R7740:7741 VC.Verif_stack <> il var
R7747:7753 VST.floyd.library <> mem_mgr defax
R7755:7756 VC.Verif_stack <> gv var
R7779:7787 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R7788:7794 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7828:7829 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7795:7798 VST.floyd.canon <> temp constr
R7810:7813 compcert.common.Values <> Vint constr
R7816:7823 compcert.lib.Integers Int repr def
R7825:7825 VC.Verif_stack <> i var
R7800:7807 VST.veric.SeparationLogic <> ret_temp def
R7830:7834 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7845:7846 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7857:7857 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R7835:7839 VC.Verif_stack <> stack def
R7844:7844 VC.Verif_stack <> p var
R7841:7842 VC.Verif_stack <> il var
R7847:7853 VST.floyd.library <> mem_mgr defax
R7855:7856 VC.Verif_stack <> gv var
def 7915:7919 <> Gprog
R7923:7930 VST.veric.mpred <> funspecs def
R7967:7987 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R8001:8002 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R8012:8013 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R8022:8024 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R7988:8000 VC.Verif_stack <> newstack_spec def
R8003:8011 VC.Verif_stack <> push_spec def
R8014:8021 VC.Verif_stack <> pop_spec def
R7962:7965 VC.stack <> prog def
R7967:7987 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R8001:8002 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R8012:8013 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R8022:8024 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R7988:8000 VC.Verif_stack <> newstack_spec def
R8003:8011 VC.Verif_stack <> push_spec def
R8014:8021 VC.Verif_stack <> pop_spec def
prf 9411:9418 <> body_pop
R9421:9430 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R9450:9457 VC.Verif_stack <> pop_spec def
R9444:9448 VC.stack <> f_pop def
R9438:9442 VC.Verif_stack <> Gprog def
R9432:9436 VC.Verif_stack <> Vprog def
prf 9582:9590 <> body_push
R9593:9602 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R9623:9631 VC.Verif_stack <> push_spec def
R9616:9621 VC.stack <> f_push def
R9610:9614 VC.Verif_stack <> Gprog def
R9604:9608 VC.Verif_stack <> Vprog def
R9670:9670 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9691:9692 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9695:9695 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9671:9677 compcert.cfrontend.Ctypes <> Tstruct constr
R9685:9690 compcert.cfrontend.Ctypes <> noattr def
R9679:9683 VC.stack <> _cons def
R9670:9670 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9691:9692 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9695:9695 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9671:9677 compcert.cfrontend.Ctypes <> Tstruct constr
R9685:9690 compcert.cfrontend.Ctypes <> noattr def
R9679:9683 VC.stack <> _cons def
prf 9822:9834 <> body_newstack
R9837:9846 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R9871:9883 VC.Verif_stack <> newstack_spec def
R9860:9869 VC.stack <> f_newstack def
R9854:9858 VC.Verif_stack <> Gprog def
R9848:9852 VC.Verif_stack <> Vprog def
