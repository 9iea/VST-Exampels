DIGEST ec608e97cde8189f55509be6910c45f5
FVC.Verif_reverse
R731:749 VST.floyd.proofauto <> <> lib
R767:776 VC.reverse <> <> lib
inst 788:796 <> CompSpecs
R800:808 VST.veric.mpred <> compspecs class
R826:829 VC.reverse <> prog def
def 852:856 <> Vprog
R860:867 VST.veric.mpred <> varspecs def
R882:885 VC.reverse <> prog def
def 1219:1224 <> t_list
R1229:1235 compcert.cfrontend.Ctypes <> Tstruct constr
R1243:1248 compcert.cfrontend.Ctypes <> noattr def
R1237:1241 VC.reverse <> _list def
def 1559:1565 <> listrep
R1575:1578 Coq.Init.Datatypes <> list ind
R1580:1582 compcert.common.Values <> val ind
R1589:1591 compcert.common.Values <> val ind
R1596:1600 VST.veric.mpred <> mpred def
R1612:1616 VC.Verif_reverse <> sigma var
R1627:1628 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R1640:1642 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R1644:1644 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R1648:1649 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R1676:1680 VST.msl.seplog <> ::logic:x_'*'_x not
R1650:1656 VST.floyd.field_at <> data_at def
R1675:1675 VC.Verif_reverse <> p var
R1669:1669 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1671:1671 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1673:1673 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1672:1672 VC.Verif_reverse <> y var
R1662:1667 VC.Verif_reverse <> t_list def
R1658:1660 VST.veric.shares <> Tsh def
R1681:1687 VC.Verif_reverse <> listrep def
R1692:1692 VC.Verif_reverse <> y var
R1645:1647 compcert.common.Values <> val ind
R1697:1699 Coq.Init.Datatypes <> nil constr
R1725:1728 VST.msl.seplog <> ::logic:x_'&&'_x not
R1709:1712 VST.msl.seplog <> ::logic:'!!'_x not
R1724:1724 VST.msl.seplog <> ::logic:'!!'_x not
R1714:1716 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1713:1713 VC.Verif_reverse <> p var
R1717:1723 VST.veric.base <> nullval def
R1729:1731 VST.msl.seplog <> emp meth
R2942:2948 VC.Verif_reverse <> listrep def
prf 3490:3511 <> data_at_isptr_example1
R3532:3534 compcert.common.Values <> val ind
R3568:3572 VST.msl.seplog <> :::x_'|--'_x not
R3542:3548 VST.floyd.field_at <> data_at def
R3567:3567 VC.Verif_reverse <> p var
R3561:3561 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3563:3563 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3565:3565 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3562:3562 VC.Verif_reverse <> h var
R3564:3564 VC.Verif_reverse <> y var
R3554:3559 VC.Verif_reverse <> t_list def
R3550:3552 VST.veric.shares <> Tsh def
R3573:3575 VST.msl.seplog <> ::logic:'!!'_x not
R3576:3580 VST.veric.val_lemmas <> isptr def
R3582:3582 VC.Verif_reverse <> p var
R3704:3708 VST.veric.val_lemmas <> isptr def
prf 3861:3882 <> data_at_isptr_example2
R3903:3905 compcert.common.Values <> val ind
R3939:3943 VST.msl.seplog <> :::x_'|--'_x not
R3913:3919 VST.floyd.field_at <> data_at def
R3938:3938 VC.Verif_reverse <> p var
R3932:3932 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3934:3934 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3936:3936 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3933:3933 VC.Verif_reverse <> h var
R3935:3935 VC.Verif_reverse <> y var
R3925:3930 VC.Verif_reverse <> t_list def
R3921:3923 VST.veric.shares <> Tsh def
R3944:3946 VST.msl.seplog <> ::logic:'!!'_x not
R3947:3951 VST.veric.val_lemmas <> isptr def
R3953:3953 VC.Verif_reverse <> p var
R4837:4846 VST.msl.seplog <> prop_right meth
R4837:4846 VST.msl.seplog <> prop_right meth
R4926:4947 VST.floyd.nested_field_lemmas <> field_compatible_isptr thm
R5128:5149 VST.floyd.nested_field_lemmas <> field_compatible_isptr thm
R5128:5149 VST.floyd.nested_field_lemmas <> field_compatible_isptr thm
prf 5414:5434 <> listrep_facts_example
R5472:5476 VST.msl.seplog <> :::x_'|--'_x not
R5457:5463 VC.Verif_reverse <> listrep def
R5471:5471 VC.Verif_reverse <> p var
R5465:5469 VC.Verif_reverse <> sigma var
R5477:5480 VST.msl.seplog <> ::logic:'!!'_x not
R5501:5501 VST.msl.seplog <> ::logic:'!!'_x not
R5488:5491 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R5481:5485 VST.veric.val_lemmas <> isptr def
R5487:5487 VC.Verif_reverse <> p var
R5493:5493 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5492:5492 VC.Verif_reverse <> p var
R5494:5500 VST.veric.base <> nullval def
prf 5646:5666 <> listrep_facts_example
R5704:5708 VST.msl.seplog <> :::x_'|--'_x not
R5689:5695 VC.Verif_reverse <> listrep def
R5703:5703 VC.Verif_reverse <> p var
R5697:5701 VC.Verif_reverse <> sigma var
R5709:5712 VST.msl.seplog <> ::logic:'!!'_x not
R5733:5733 VST.msl.seplog <> ::logic:'!!'_x not
R5720:5723 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R5713:5717 VST.veric.val_lemmas <> isptr def
R5719:5719 VC.Verif_reverse <> p var
R5725:5725 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5724:5724 VC.Verif_reverse <> p var
R5726:5732 VST.veric.base <> nullval def
prf 6181:6199 <> listrep_local_facts
R6238:6245 VST.msl.seplog <> :::x_'|--'_x not
R6223:6229 VC.Verif_reverse <> listrep def
R6237:6237 VC.Verif_reverse <> p var
R6231:6235 VC.Verif_reverse <> sigma var
R6246:6249 VST.msl.seplog <> ::logic:'!!'_x not
R6299:6299 VST.msl.seplog <> ::logic:'!!'_x not
R6270:6274 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6298:6298 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6250:6267 VST.veric.val_lemmas <> is_pointer_or_null def
R6269:6269 VC.Verif_reverse <> p var
R6284:6288 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R6276:6276 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6275:6275 VC.Verif_reverse <> p var
R6277:6283 VST.veric.base <> nullval def
R6294:6294 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6289:6293 VC.Verif_reverse <> sigma var
R6295:6297 Coq.Init.Datatypes <> nil constr
R6917:6923 VC.Verif_reverse <> listrep def
R7525:7531 VC.Verif_reverse <> listrep def
R7539:7545 VC.Verif_reverse <> listrep def
R7539:7545 VC.Verif_reverse <> listrep def
R9201:9222 VST.floyd.nested_field_lemmas <> field_compatible_isptr thm
R9394:9398 VST.veric.val_lemmas <> isptr def
R9479:9485 VST.veric.base <> nullval def
R9625:9648 VST.floyd.nested_field_lemmas <> field_compatible_nullval thm
R9776:9799 VST.floyd.nested_field_lemmas <> field_compatible_nullval thm
R9776:9799 VST.floyd.nested_field_lemmas <> field_compatible_nullval thm
prf 10646:10678 <> struct_list_valid_pointer_example
R10726:10730 VST.msl.seplog <> :::x_'|--'_x not
R10700:10706 VST.floyd.field_at <> data_at def
R10725:10725 VC.Verif_reverse <> p var
R10719:10719 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10721:10721 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10723:10723 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10720:10720 VC.Verif_reverse <> h var
R10722:10722 VC.Verif_reverse <> y var
R10712:10717 VC.Verif_reverse <> t_list def
R10708:10710 VST.veric.shares <> Tsh def
R10731:10743 VST.veric.expr <> valid_pointer def
R10745:10745 VC.Verif_reverse <> p var
prf 10948:10976 <> listrep_valid_pointer_example
R11015:11019 VST.msl.seplog <> :::x_'|--'_x not
R11000:11006 VC.Verif_reverse <> listrep def
R11014:11014 VC.Verif_reverse <> p var
R11008:11012 VC.Verif_reverse <> sigma var
R11020:11032 VST.veric.expr <> valid_pointer def
R11034:11034 VC.Verif_reverse <> p var
prf 11252:11272 <> listrep_valid_pointer
R11311:11315 VST.msl.seplog <> :::x_'|--'_x not
R11296:11302 VC.Verif_reverse <> listrep def
R11310:11310 VC.Verif_reverse <> p var
R11304:11308 VC.Verif_reverse <> sigma var
R11316:11328 VST.veric.expr <> valid_pointer def
R11330:11330 VC.Verif_reverse <> p var
R11402:11408 VC.Verif_reverse <> listrep def
def 12171:12182 <> reverse_spec
R12191:12193 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R12186:12190 compcert.common.AST <> ident def
R12194:12200 VST.veric.mpred <> funspec ind
R12206:12213 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R12222:12224 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R12214:12221 VC.reverse <> _reverse def
R12225:12229 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R12235:12237 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R12246:12247 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R12249:12250 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R12254:12263 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R12283:12290 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R12348:12358 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R12370:12377 VST.floyd.client_lemmas <> :::'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R12266:12270 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R12282:12282 VST.floyd.client_lemmas <> ::formals:x_'OF'_x not
R12264:12265 VC.reverse <> _p def
R12271:12274 compcert.exportclight.Clightdefs <> tptr def
R12276:12281 VC.Verif_reverse <> t_list def
R12359:12362 compcert.exportclight.Clightdefs <> tptr def
R12364:12369 VC.Verif_reverse <> t_list def
R12238:12241 Coq.Init.Datatypes <> list ind
R12243:12245 compcert.common.Values <> val ind
R12251:12253 compcert.common.Values <> val ind
R12291:12303 VST.floyd.canon <> :::'PROP'_'()'_x not
R12304:12310 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R12320:12326 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R12311:12314 VST.floyd.canon <> temp constr
R12319:12319 VC.Verif_reverse <> p var
R12316:12317 VC.reverse <> _p def
R12327:12331 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R12347:12347 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R12332:12338 VC.Verif_reverse <> listrep def
R12346:12346 VC.Verif_reverse <> p var
R12340:12344 VC.Verif_reverse <> sigma var
R12378:12380 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R12382:12382 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R12386:12392 VST.floyd.canon <> ::assert:'EX'_x_':'_x_','_x not
R12383:12385 compcert.common.Values <> val ind
R12393:12400 VST.floyd.canon <> :::'PROP'_'()'_x not
R12401:12407 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R12423:12429 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R12408:12411 VST.floyd.canon <> temp constr
R12422:12422 VC.Verif_reverse <> q var
R12413:12420 VST.veric.SeparationLogic <> ret_temp def
R12430:12434 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R12455:12455 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R12435:12441 VC.Verif_reverse <> listrep def
R12454:12454 VC.Verif_reverse <> q var
R12443:12445 Coq.Lists.List <> rev def
R12447:12451 VC.Verif_reverse <> sigma var
R12383:12385 compcert.common.Values <> val ind
def 13569:13573 <> Gprog
R13577:13584 VST.veric.mpred <> funspecs def
R13622:13623 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R13636:13637 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R13624:13635 VC.Verif_reverse <> reverse_spec def
R13617:13620 VC.reverse <> prog def
R13622:13623 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R13636:13637 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R13624:13635 VC.Verif_reverse <> reverse_spec def
prf 13934:13945 <> body_reverse
R13948:13957 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R14017:14028 VC.Verif_reverse <> reverse_spec def
R14007:14015 VC.reverse <> f_reverse def
R13965:13969 VC.Verif_reverse <> Gprog def
R13959:13963 VC.Verif_reverse <> Vprog def
R15709:15711 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15714:15715 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15724:15725 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15726:15728 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15731:15733 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15742:15748 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15749:15751 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15753:15754 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15758:15759 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15760:15762 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15764:15765 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15769:15775 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15776:15781 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R15802:15808 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R15787:15789 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15796:15799 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R15790:15792 Coq.Lists.List <> rev def
R15794:15795 VC.Verif_reverse <> s1 var
R15800:15801 VC.Verif_reverse <> s2 var
R15809:15815 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R15825:15826 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R15836:15842 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R15816:15819 VST.floyd.canon <> temp constr
R15824:15824 VC.Verif_reverse <> w var
R15821:15822 VC.reverse <> _w def
R15827:15830 VST.floyd.canon <> temp constr
R15835:15835 VC.Verif_reverse <> v var
R15832:15833 VC.reverse <> _v def
R15843:15847 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R15860:15861 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R15874:15874 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R15848:15854 VC.Verif_reverse <> listrep def
R15859:15859 VC.Verif_reverse <> w var
R15856:15857 VC.Verif_reverse <> s1 var
R15862:15868 VC.Verif_reverse <> listrep def
R15873:15873 VC.Verif_reverse <> v var
R15870:15871 VC.Verif_reverse <> s2 var
R15766:15768 compcert.common.Values <> val ind
R15755:15757 compcert.common.Values <> val ind
R15734:15737 Coq.Init.Datatypes <> list ind
R15739:15741 compcert.common.Values <> val ind
R15716:15719 Coq.Init.Datatypes <> list ind
R15721:15723 compcert.common.Values <> val ind
R15709:15711 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15714:15715 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15724:15725 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15726:15728 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15731:15733 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15742:15748 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15749:15751 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15753:15754 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15758:15759 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15760:15762 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15764:15765 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15769:15775 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R15776:15781 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R15802:15808 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R15787:15789 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15796:15799 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R15790:15792 Coq.Lists.List <> rev def
R15794:15795 VC.Verif_reverse <> s1 var
R15800:15801 VC.Verif_reverse <> s2 var
R15809:15815 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R15825:15826 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R15836:15842 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R15816:15819 VST.floyd.canon <> temp constr
R15824:15824 VC.Verif_reverse <> w var
R15821:15822 VC.reverse <> _w def
R15827:15830 VST.floyd.canon <> temp constr
R15835:15835 VC.Verif_reverse <> v var
R15832:15833 VC.reverse <> _v def
R15843:15847 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R15860:15861 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R15874:15874 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R15848:15854 VC.Verif_reverse <> listrep def
R15859:15859 VC.Verif_reverse <> w var
R15856:15857 VC.Verif_reverse <> s1 var
R15862:15868 VC.Verif_reverse <> listrep def
R15873:15873 VC.Verif_reverse <> v var
R15870:15871 VC.Verif_reverse <> s2 var
R15766:15768 compcert.common.Values <> val ind
R15755:15757 compcert.common.Values <> val ind
R15734:15737 Coq.Init.Datatypes <> list ind
R15739:15741 compcert.common.Values <> val ind
R15716:15719 Coq.Init.Datatypes <> list ind
R15721:15723 compcert.common.Values <> val ind
R16470:16472 Coq.Init.Datatypes <> nil constr
R16474:16476 compcert.common.Values <> val ind
R16485:16491 VST.veric.base <> nullval def
R16470:16472 Coq.Init.Datatypes <> nil constr
R16474:16476 compcert.common.Values <> val ind
R16485:16491 VST.veric.base <> nullval def
R16776:16782 VC.Verif_reverse <> listrep def
R19356:19362 VC.Verif_reverse <> listrep def
R19906:19912 VC.Verif_reverse <> listrep def
R19925:19931 VC.Verif_reverse <> listrep def
R19925:19931 VC.Verif_reverse <> listrep def
R20938:20938 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20944:20944 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20946:20946 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20948:20948 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20950:20950 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20940:20941 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20938:20938 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20944:20944 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20946:20946 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20948:20948 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20950:20950 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20940:20941 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21092:21098 Coq.Lists.List <> app_ass syndef
R21092:21098 Coq.Lists.List <> app_ass syndef
R21092:21098 Coq.Lists.List <> app_ass syndef
R21119:21125 VC.Verif_reverse <> listrep def
R21138:21144 VC.Verif_reverse <> listrep def
R21138:21144 VC.Verif_reverse <> listrep def
R22132:22136 Coq.Init.Logic <> proj1 thm
R22132:22136 Coq.Init.Logic <> proj1 thm
R22132:22136 Coq.Init.Logic <> proj1 thm
R22158:22164 VC.Verif_reverse <> listrep def
R22177:22183 VC.Verif_reverse <> listrep def
R22177:22183 VC.Verif_reverse <> listrep def
R22208:22218 Coq.Lists.List <> app_nil_end thm
R22221:22234 Coq.Lists.List <> rev_involutive thm
R22208:22218 Coq.Lists.List <> app_nil_end thm
R22208:22218 Coq.Lists.List <> app_nil_end thm
R22221:22234 Coq.Lists.List <> rev_involutive thm
R22221:22234 Coq.Lists.List <> rev_involutive thm
prf 23502:23521 <> listrep_len_ge2_fact
R23539:23541 compcert.common.Values <> val ind
R23548:23551 Coq.Init.Datatypes <> list ind
R23553:23555 compcert.common.Values <> val ind
R23584:23590 VST.msl.seplog <> :::x_'|--'_x not
R23561:23567 VC.Verif_reverse <> listrep def
R23583:23583 VC.Verif_reverse <> x var
R23571:23574 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R23570:23570 VC.Verif_reverse <> a var
R23576:23579 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R23575:23575 VC.Verif_reverse <> b var
R23580:23580 VC.Verif_reverse <> l var
R23591:23593 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R23595:23596 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R23600:23601 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R23602:23604 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R23606:23607 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R23611:23618 VST.msl.seplog <> ::logic:'EX'_x_':'_x_','_x not
R23680:23688 VST.msl.seplog <> ::logic:x_'*'_x not
R23645:23653 VST.msl.seplog <> ::logic:x_'*'_x not
R23619:23625 VST.floyd.field_at <> data_at def
R23644:23644 VC.Verif_reverse <> x var
R23638:23638 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23640:23640 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23642:23642 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23639:23639 VC.Verif_reverse <> a var
R23641:23641 VC.Verif_reverse <> y var
R23631:23636 VC.Verif_reverse <> t_list def
R23627:23629 VST.veric.shares <> Tsh def
R23654:23660 VST.floyd.field_at <> data_at def
R23679:23679 VC.Verif_reverse <> y var
R23673:23673 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23675:23675 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23677:23677 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23674:23674 VC.Verif_reverse <> b var
R23676:23676 VC.Verif_reverse <> z var
R23666:23671 VC.Verif_reverse <> t_list def
R23662:23664 VST.veric.shares <> Tsh def
R23689:23695 VC.Verif_reverse <> listrep def
R23699:23699 VC.Verif_reverse <> z var
R23697:23697 VC.Verif_reverse <> l var
R23608:23610 compcert.common.Values <> val ind
R23597:23599 compcert.common.Values <> val ind
R23728:23734 VC.Verif_reverse <> listrep def
R23742:23748 VC.Verif_reverse <> listrep def
R23742:23748 VC.Verif_reverse <> listrep def
prf 23801:23833 <> listrep_len_ge2_address_different
R23855:23857 compcert.common.Values <> val ind
R23864:23867 Coq.Init.Datatypes <> list ind
R23869:23871 compcert.common.Values <> val ind
R23950:23956 VST.msl.seplog <> :::x_'|--'_x not
R23934:23938 VST.msl.seplog <> ::logic:x_'*'_x not
R23903:23907 VST.msl.seplog <> ::logic:x_'*'_x not
R23877:23883 VST.floyd.field_at <> data_at def
R23902:23902 VC.Verif_reverse <> x var
R23896:23896 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23898:23898 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23900:23900 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23897:23897 VC.Verif_reverse <> a var
R23899:23899 VC.Verif_reverse <> y var
R23889:23894 VC.Verif_reverse <> t_list def
R23885:23887 VST.veric.shares <> Tsh def
R23908:23914 VST.floyd.field_at <> data_at def
R23933:23933 VC.Verif_reverse <> y var
R23927:23927 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23929:23929 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23931:23931 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23928:23928 VC.Verif_reverse <> b var
R23930:23930 VC.Verif_reverse <> z var
R23920:23925 VC.Verif_reverse <> t_list def
R23916:23918 VST.veric.shares <> Tsh def
R23939:23945 VC.Verif_reverse <> listrep def
R23949:23949 VC.Verif_reverse <> z var
R23947:23947 VC.Verif_reverse <> l var
R23957:23960 VST.msl.seplog <> ::logic:'!!'_x not
R23967:23967 VST.msl.seplog <> ::logic:'!!'_x not
R23962:23965 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R23961:23961 VC.Verif_reverse <> x var
R23966:23966 VC.Verif_reverse <> y var
R24120:24135 VST.floyd.field_at <> data_at_conflict thm
R24485:24490 compcert.common.Values Val eq def
R24507:24516 VST.msl.seplog <> prop_right meth
R24485:24490 compcert.common.Values Val eq def
R24507:24516 VST.msl.seplog <> prop_right meth
R24550:24565 VST.floyd.field_at <> data_at_conflict thm
R24578:24578 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24580:24581 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24583:24583 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24571:24576 VC.Verif_reverse <> t_list def
R24567:24569 VST.veric.shares <> Tsh def
R24550:24565 VST.floyd.field_at <> data_at_conflict thm
R24578:24578 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24580:24581 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24583:24583 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24571:24576 VC.Verif_reverse <> t_list def
R24567:24569 VST.veric.shares <> Tsh def
prf 25822:25838 <> body_reverse_step
R25859:25868 VST.veric.juicy_extspec <> OracleKind class
R25882:25885 Coq.Init.Datatypes <> list ind
R25887:25889 compcert.common.Values <> val ind
R25900:25903 Coq.Init.Datatypes <> list ind
R25905:25907 compcert.common.Values <> val ind
R25917:25919 compcert.common.Values <> val ind
R25929:25932 Coq.Init.Datatypes <> list ind
R25934:25936 compcert.common.Values <> val ind
R25948:25950 compcert.common.Values <> val ind
R25962:25966 VST.veric.val_lemmas <> isptr def
R25968:25968 VC.Verif_reverse <> v var
R25983:25985 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25978:25982 VC.Verif_reverse <> sigma var
R25992:25995 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R25986:25988 Coq.Lists.List <> rev def
R25990:25991 VC.Verif_reverse <> s1 var
R25997:26000 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R25996:25996 VC.Verif_reverse <> h var
R26001:26001 VC.Verif_reverse <> r var
R26011:26013 compcert.common.Values <> val ind
R26019:26023 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R26588:26604 VST.veric.SeparationLogic <> normal_ret_assert def
R26614:26630 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R26631:26637 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R26647:26648 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R26658:26659 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R26669:26678 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R26638:26641 VST.floyd.canon <> temp constr
R26646:26646 VC.Verif_reverse <> y var
R26643:26644 VC.reverse <> _v def
R26649:26652 VST.floyd.canon <> temp constr
R26657:26657 VC.Verif_reverse <> v var
R26654:26655 VC.reverse <> _w def
R26660:26663 VST.floyd.canon <> temp constr
R26668:26668 VC.Verif_reverse <> y var
R26665:26666 VC.reverse <> _t def
R26679:26683 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R26696:26697 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R26725:26726 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R26738:26738 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R26684:26690 VC.Verif_reverse <> listrep def
R26695:26695 VC.Verif_reverse <> w var
R26692:26693 VC.Verif_reverse <> s1 var
R26698:26704 VST.floyd.field_at <> data_at def
R26724:26724 VC.Verif_reverse <> v var
R26717:26717 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26719:26720 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26722:26722 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26718:26718 VC.Verif_reverse <> h var
R26721:26721 VC.Verif_reverse <> w var
R26710:26715 VC.Verif_reverse <> t_list def
R26706:26708 VST.veric.shares <> Tsh def
R26727:26733 VC.Verif_reverse <> listrep def
R26737:26737 VC.Verif_reverse <> y var
R26735:26735 VC.Verif_reverse <> r var
R26199:26207 compcert.cfrontend.Clight <> Ssequence constr
R26445:26453 compcert.cfrontend.Clight <> Ssequence constr
R26528:26531 compcert.cfrontend.Clight <> Sset constr
R26537:26544 compcert.cfrontend.Clight <> Etempvar constr
R26550:26553 compcert.exportclight.Clightdefs <> tptr def
R26556:26562 compcert.cfrontend.Ctypes <> Tstruct constr
R26570:26575 compcert.cfrontend.Ctypes <> noattr def
R26564:26568 VC.reverse <> _list def
R26546:26547 VC.reverse <> _t def
R26533:26534 VC.reverse <> _v def
R26456:26459 compcert.cfrontend.Clight <> Sset constr
R26465:26472 compcert.cfrontend.Clight <> Etempvar constr
R26478:26481 compcert.exportclight.Clightdefs <> tptr def
R26484:26490 compcert.cfrontend.Ctypes <> Tstruct constr
R26498:26503 compcert.cfrontend.Ctypes <> noattr def
R26492:26496 VC.reverse <> _list def
R26474:26475 VC.reverse <> _v def
R26461:26462 VC.reverse <> _w def
R26217:26223 compcert.cfrontend.Clight <> Sassign constr
R26393:26400 compcert.cfrontend.Clight <> Etempvar constr
R26406:26409 compcert.exportclight.Clightdefs <> tptr def
R26412:26418 compcert.cfrontend.Ctypes <> Tstruct constr
R26426:26431 compcert.cfrontend.Ctypes <> noattr def
R26420:26424 VC.reverse <> _list def
R26402:26403 VC.reverse <> _w def
R26236:26241 compcert.cfrontend.Clight <> Efield constr
R26352:26355 compcert.exportclight.Clightdefs <> tptr def
R26358:26364 compcert.cfrontend.Ctypes <> Tstruct constr
R26372:26377 compcert.cfrontend.Ctypes <> noattr def
R26366:26370 VC.reverse <> _list def
R26345:26349 VC.reverse <> _tail def
R26257:26262 compcert.cfrontend.Clight <> Ederef constr
R26309:26315 compcert.cfrontend.Ctypes <> Tstruct constr
R26323:26328 compcert.cfrontend.Ctypes <> noattr def
R26317:26321 VC.reverse <> _list def
R26265:26272 compcert.cfrontend.Clight <> Etempvar constr
R26278:26281 compcert.exportclight.Clightdefs <> tptr def
R26284:26290 compcert.cfrontend.Ctypes <> Tstruct constr
R26298:26303 compcert.cfrontend.Ctypes <> noattr def
R26292:26296 VC.reverse <> _list def
R26274:26275 VC.reverse <> _v def
R26073:26086 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R26087:26093 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R26103:26104 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R26114:26115 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R26125:26131 VST.floyd.canon <> :::'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R26094:26097 VST.floyd.canon <> temp constr
R26102:26102 VC.Verif_reverse <> y var
R26099:26100 VC.reverse <> _t def
R26105:26108 VST.floyd.canon <> temp constr
R26113:26113 VC.Verif_reverse <> w var
R26110:26111 VC.reverse <> _w def
R26116:26119 VST.floyd.canon <> temp constr
R26124:26124 VC.Verif_reverse <> v var
R26121:26122 VC.reverse <> _v def
R26132:26136 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R26149:26150 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R26178:26179 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R26191:26191 VST.floyd.canon <> :::'SEP'_'('_x_';'_'..'_';'_x_')' not
R26137:26143 VC.Verif_reverse <> listrep def
R26148:26148 VC.Verif_reverse <> w var
R26145:26146 VC.Verif_reverse <> s1 var
R26151:26157 VST.floyd.field_at <> data_at def
R26177:26177 VC.Verif_reverse <> v var
R26170:26170 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26172:26173 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26175:26175 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26171:26171 VC.Verif_reverse <> h var
R26174:26174 VC.Verif_reverse <> y var
R26163:26168 VC.Verif_reverse <> t_list def
R26159:26161 VST.veric.shares <> Tsh def
R26180:26186 VC.Verif_reverse <> listrep def
R26190:26190 VC.Verif_reverse <> y var
R26188:26188 VC.Verif_reverse <> r var
R26026:26039 VST.veric.tycontext <> func_tycontext def
R26063:26065 Coq.Init.Datatypes <> nil constr
R26057:26061 VC.Verif_reverse <> Gprog def
R26051:26055 VC.Verif_reverse <> Vprog def
R26041:26049 VC.reverse <> f_reverse def
